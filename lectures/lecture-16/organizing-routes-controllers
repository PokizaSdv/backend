//   Organizing Our Code | Controllers and Routes
// When developing a Book Management App, you may start by placing all the code in a single file. While this straightforward approach can get the application up and running, it presents a variety of complications as the codebase scales.

// JAVASCRIPT
import express from "express";
import { books } from "./data.js";
import { validate, v4 as uuid } from "uuid";

// const app = express();
app.use(express.json());

// const PORT = 4000;

// Get all books (with optional genre filter)
app.get("/books", (req, res) => {
    const genre = req.query.genre;
    let filteredBooks = Object.values(books);
    if (genre) {
        filteredBooks = filteredBooks.filter((book) => book.genre === genre);
    }
    res.status(200).json({ data: filteredBooks });
});

// Create a new book
app.post("/books", (req, res) => {
    const data = req.body;
    const id = uuid();
    const book = {
        id,
        ...data,
        reviews: []
    };
    books[id] = book;
    res.status(201).json({ data: book });
});

// Get a single book by ID
app.get("/books/:bookId", (req, res) => {
    const bookId = req.params.bookId;
    if (!validate(bookId) || !books[bookId]) {
        return res.status(400).json({ message: "Not a valid book ID" });
    }
    res.status(200).json({ data: books[bookId] });
});

// Update a single book by ID
app.put("/books/:bookId", (req, res) => {
    const bookId = req.params.bookId;
    const updatedData = req.body;
    if (!validate(bookId) || !books[bookId]) {
        return res.status(400).json({ message: "Not a valid book ID" });
    }
    books[bookId] = { ...books[bookId], ...updatedData };
    res.status(200).json({ data: books[bookId] });
});

// Delete a single book by ID
app.delete("/books/:bookId", (req, res) => {
    const bookId = req.params.bookId;
    if (!validate(bookId) || !books[bookId]) {
        return res.status(400).json({ message: "Not a valid book ID" });
    }
    delete books[bookId];
    res.status(204).send();
});

// Get all reviews of a book
app.get("/books/:bookId/reviews", (req, res) => {
    const bookId = req.params.bookId;
    if (!validate(bookId) || !books[bookId]) {
        return res.status(400).json({ message: "Not a valid book ID" });
    }
    res.status(200).json({ data: books[bookId].reviews });
});

// Create a new review for a book
app.post("/books/:bookId/reviews", (req, res) => {
    const bookId = req.params.bookId;
    const reviewData = req.body;
    const id = uuid();
    if (!validate(bookId) || !books[bookId]) {
        return res.status(400).json({ message: "Not a valid book ID" });
    }
    const newReview = {
        id,
        ...reviewData
    };
    books[bookId].reviews.push(newReview);
    res.status(201).json({ data: newReview });
});

// Get a single review of a book
app.get("/books/:bookId/reviews/:reviewId", (req, res) => {
    const { bookId, reviewId } = req.params;
    if (!validate(bookId) || !books[bookId]) {
        return res.status(400).json({ message: "Not a valid book ID" });
    }
    const review = books[bookId].reviews.find((r) => r.id === reviewId);
    if (!review) {
        return res.status(404).json({ message: "Review not found" });
    }
    res.status(200).json({ data: review });
});

// Delete a single review of a book
app.delete("/books/:bookId/reviews/:reviewId", (req, res) => {
    const { bookId, reviewId } = req.params;
    if (!validate(bookId) || !books[bookId]) {
        return res.status(400).json({ message: "Not a valid book ID" });
    }
    const reviewIndex = books[bookId].reviews.findIndex(
        (r) => r.id === reviewId
    );
    if (reviewIndex === -1) {
        return res.status(404).json({ message: "Review not found" });
    }
    books[bookId].reviews.splice(reviewIndex, 1);
    res.status(204).send();
});

app.listen(PORT, () => {
    console.log(`Server is running on ${PORT}`);
});
// Challenges
// Low Maintainability: It becomes increasingly difficult to locate and modify specific pieces of code in a large, single file.
// Reduced Readability: The larger the file, the more challenging it is to read and understand the code, particularly for new contributors.
// Scalability Challenges: Adding new features or making modifications becomes increasingly cumbersome, affecting the app's scalability.
// Increased Risk of Bugs: The chances of introducing errors increase due to the difficulty in tracking down functionalities and their interdependencies.
// Solution: Modularization of the Codebase
// To address these challenges, the application's code was refactored by breaking it into smaller, modular pieces. The primary transformation entailed separating the code into three distinct files:

// Server Initialization: The foundational server configurations, including the port settings and middleware, remained in the main server file.
// Routing: The routes were moved to a separate file called book.route.js, where they were defined using Express's Router.
// Controllers: The business logic for each route was extracted to a dedicated controller file named book.controller.js.
// Controllers --- handles the requests and responds back
// Hereâ€™s how each part functions
// Server Initialization
// The primary server file (index.js) imports the necessary modules and sets up the server. However, now it imports a route module (bookRouter) that handles all book-related routes.

import express from "express";
import { bookRouter } from "./routes/book.route.js";

const app = express();
app.use(express.json());

const PORT = 4000;

app.use("/books", bookRouter);

app.listen(PORT, () => {
    console.log(`Server is running on ${PORT}`);
});
// Routing
// In book.route.js, the routes are declared using the Express Router, a feature that allows for modular routing. The router imports the controller methods that will execute when each route is accessed.

import { Router } from "express";

import { bookController } from "../controllers/book.controller.js";

const bookRouter = Router();

bookRouter.get("/", bookController.getAllBooks);
bookRouter.post("/", bookController.createABook);
bookRouter.get("/:bookId", bookController.getBookById);
bookRouter.put("/:bookId", bookController.updateBook);
bookRouter.delete("/:bookId", bookController.deleteBook);
bookRouter.get("/:bookId/reviews", bookController.getBookReviews);
bookRouter.post("/:bookId/reviews", bookController.createReview);
bookRouter.get("/:bookId/reviews/:reviewId", bookController.getReview);
bookRouter.delete("/:bookId/reviews/:reviewId", bookController.deleteReview);

// export { bookRouter }
// Controllers
// In book.controller.js, the business logic that was previously in the main server file is now abstracted into methods within the BookController class.

import { books } from "../data.js";
import { validate, v4 as uuid } from "uuid";

const API_KEY = "jkdfbgjh765478326578%%%***@@@@bsdhfbdhjbbhvbdsfjhgc";

class BookController {
    getAllBooks = (req, res) => {
        const genre = req.query.genre;
        let filteredBooks = Object.values(books);
        if (genre) {
            filteredBooks = filteredBooks.filter(
                (book) => book.genre === genre
            );
        }
        res.status(200).json({ data: filteredBooks });
    };

    createABook = (req, res) => {
        const data = req.body;
        const id = uuid();
        const book = {
            id,
            ...data,
            reviews: []
        };
        books[id] = book;
        res.status(201).json({ data: book });
    };

    getBookById = (req, res) => {
        const bookId = req.params.bookId;
        if (!validate(bookId) || !books[bookId]) {
            res.status(400).json({ message: "Not a valid book ID" });
            return;
        }
        console.log("hello");
        res.status(200).json({ data: books[bookId] });
    };

    updateBook = (req, res) => {
        const bookId = req.params.bookId;
        const updatedData = req.body;
        if (!validate(bookId) || !books[bookId]) {
            return res.status(400).json({ message: "Not a valid book ID" });
        }
        books[bookId] = { ...books[bookId], ...updatedData };
        res.status(200).json({ data: books[bookId] });
    };

    deleteBook = (req, res) => {
        const bookId = req.params.bookId;
        if (!validate(bookId) || !books[bookId]) {
            return res.status(400).json({ message: "Not a valid book ID" });
        }
        delete books[bookId];
        res.status(204).send();
    };

    getBookReviews = (req, res) => {
        const bookId = req.params.bookId;
        if (!validate(bookId) || !books[bookId]) {
            return res.status(400).json({ message: "Not a valid book ID" });
        }
        res.status(200).json({ data: books[bookId].reviews });
    };

    createReview = (req, res) => {
        const bookId = req.params.bookId;
        const reviewData = req.body;
        const id = uuid();
        if (!validate(bookId) || !books[bookId]) {
            return res.status(400).json({ message: "Not a valid book ID" });
        }
        const newReview = {
            id,
            ...reviewData
        };
        books[bookId].reviews.push(newReview);
        res.status(201).json({ data: newReview });
    };

    getReview = (req, res) => {
        const { bookId, reviewId } = req.params;
        if (!validate(bookId) || !books[bookId]) {
            return res.status(400).json({ message: "Not a valid book ID" });
        }
        const review = books[bookId].reviews.find((r) => r.id === reviewId);
        if (!review) {
            return res.status(404).json({ message: "Review not found" });
        }
        res.status(200).json({ data: review });
    };

    deleteReview = (req, res) => {
        const { bookId, reviewId } = req.params;
        if (!validate(bookId) || !books[bookId]) {
            return res.status(400).json({ message: "Not a valid book ID" });
        }
        const reviewIndex = books[bookId].reviews.findIndex(
            (r) => r.id === reviewId
        );
        if (reviewIndex === -1) {
            return res.status(404).json({ message: "Review not found" });
        }
        books[bookId].reviews.splice(reviewIndex, 1);
        res.status(204).send();
    };
}

export const bookController = new BookController();

// By splitting the code in this manner, you achieve:

// Enhanced Readability: Each file has a specific responsibility, making it easier to understand.
// Improved Maintainability: Isolating functionalities into their own files allows for more straightforward debugging and modifications.
// Greater Scalability: You can now more effortlessly add new routes, controllers, or even entirely new modules.
